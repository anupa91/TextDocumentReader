package com.an.textdocreader.database.generatedDAO;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.an.textdocreader.database.Images;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "IMAGES".
*/
public class ImagesDao extends AbstractDao<Images, Long> {

    public static final String TABLENAME = "IMAGES";

    /**
     * Properties of entity Images.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ImageId = new Property(0, Long.class, "imageId", true, "_id");
        public final static Property ImagePath = new Property(1, String.class, "imagePath", false, "IMAGE_PATH");
        public final static Property ContactId = new Property(2, Long.class, "contactId", false, "CONTACT_ID");
    }


    public ImagesDao(DaoConfig config) {
        super(config);
    }
    
    public ImagesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"IMAGES\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: imageId
                "\"IMAGE_PATH\" TEXT," + // 1: imagePath
                "\"CONTACT_ID\" INTEGER);"); // 2: contactId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"IMAGES\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Images entity) {
        stmt.clearBindings();
 
        Long imageId = entity.getImageId();
        if (imageId != null) {
            stmt.bindLong(1, imageId);
        }
 
        String imagePath = entity.getImagePath();
        if (imagePath != null) {
            stmt.bindString(2, imagePath);
        }
 
        Long contactId = entity.getContactId();
        if (contactId != null) {
            stmt.bindLong(3, contactId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Images entity) {
        stmt.clearBindings();
 
        Long imageId = entity.getImageId();
        if (imageId != null) {
            stmt.bindLong(1, imageId);
        }
 
        String imagePath = entity.getImagePath();
        if (imagePath != null) {
            stmt.bindString(2, imagePath);
        }
 
        Long contactId = entity.getContactId();
        if (contactId != null) {
            stmt.bindLong(3, contactId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Images readEntity(Cursor cursor, int offset) {
        Images entity = new Images( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // imageId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // imagePath
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2) // contactId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Images entity, int offset) {
        entity.setImageId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setImagePath(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setContactId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Images entity, long rowId) {
        entity.setImageId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Images entity) {
        if(entity != null) {
            return entity.getImageId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Images entity) {
        return entity.getImageId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
